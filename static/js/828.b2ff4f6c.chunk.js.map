{"version":3,"file":"static/js/828.b2ff4f6c.chunk.js","mappings":"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","sources":["components/Actor/Actor.styled.jsx","components/Actor/Actor.jsx","components/ActorGallery/ActorGallery.styled.jsx","components/ActorGallery/ActorGallery.jsx","components/Cast/Cast.jsx","utils/Api/Api.jsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const Item = styled.li`\n  display: flex;\n  flex-direction: column;\n  gap: 5px;\n  list-style: none;\n  height: auto;\n  width: calc((100% - 20px) / 2);\n  border-radius: 10px;\n  background-color: rgba(0, 0, 0, 0.37);\n  border: 1px solid rgba(50, 94, 116, 0);\n  transform: scale(1);\n  transition: transform 250ms linear, border 0.25s cubic-bezier(0.4, 0, 0.2, 1);\n  &:hover {\n    transition: all 0.25s;\n    scale: 1.03;\n  }\n  @media screen and (min-width: 768px) {\n    width: calc((100% - 60px) / 4);\n  }\n  @media screen and (min-width: 1200px) {\n    width: calc((100% - 100px) / 6);\n  }\n`;\nexport const Image = styled.img`\n  width: 100%;\n  height: 270px;\n  object-fit: cover;\n`;\n\nexport const Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n  padding: 10px;\n`;\n\nexport const InfoText = styled.p`\n  margin: 0;\n  color: #ebf8e1;\n  font-size: 14px;\n  line-height: calc(18 / 14);\n`;\nexport const SpanText = styled.span`\n  font-weight: 700;\n`;\n","import PropTypes from 'prop-types';\nimport { Item, Image, Wrapper, InfoText, SpanText } from './Actor.styled';\n\nconst Actor = ({ actor: { name, profilePath, character } }) => {\n  return (\n    <Item>\n      <Image src={profilePath} alt={name} />\n      <Wrapper>\n        <InfoText>\n          <SpanText>Name:</SpanText> {name}\n        </InfoText>\n        <InfoText>\n          <SpanText>Character:</SpanText> {character}\n        </InfoText>\n      </Wrapper>\n    </Item>\n  );\n};\n\nActor.propTypes = {\n  actor: PropTypes.shape({\n    name: PropTypes.string.isRequired,\n    profilePath: PropTypes.string,\n    character: PropTypes.string.isRequired,\n  }).isRequired,\n};\n\nexport default Actor;\n","import styled from '@emotion/styled';\n\nexport const List = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  gap: 16px;\n  margin-top: 30px;\n  padding: 0;\n`;\n","import PropTypes from 'prop-types';\nimport Actor from 'components/Actor/Actor';\nimport { List } from './ActorGallery.styled';\n\nconst ActorsGallery = ({ actors }) => {\n  return (\n    <List>\n      {actors.map(actor => (\n        <Actor key={actor.id} actor={actor} />\n      ))}\n    </List>\n  );\n};\n\nActorsGallery.propTypes = {\n  actors: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n    })\n  ).isRequired,\n};\n\nexport default ActorsGallery;\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport { getMovieCast } from '../../utils/Api/Api';\n\nimport Loader from '../Loader/Loader';\nimport ActorsGallery from '../ActorGallery/ActorGallery';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  const [movieCast, setMovieCast] = useState([]);\n  const [status, setStatus] = useState('idle');\n  const [error, setError] = useState('');\n\n  useEffect(() => {\n    if (!movieId) return;\n    const abortController = new AbortController();\n    async function addMovieCast() {\n      setStatus('pending');\n      try {\n        const cast = await getMovieCast(movieId, abortController);\n        setMovieCast(cast);\n        setStatus('resolved');\n      } catch (error) {\n        setError(error.message);\n        setStatus('rejected');\n      }\n    }\n\n    addMovieCast(movieId, abortController);\n\n    return () => {\n      abortController.abort();\n    };\n  }, [movieId]);\n\n  useEffect(() => {\n    if (error === 'canceled') {\n      return;\n    }\n    if (error) {\n      toast.error(error);\n      setError('');\n    }\n  }, [error]);\n\n  return (\n    <>\n      {status === 'pending' && <Loader />}\n      {status === 'resolved' && movieCast.length !== 0 && (\n        <ActorsGallery actors={movieCast} />\n      )}\n    </>\n  );\n};\n\nexport default Cast;\n","import axios from 'axios';\n\nimport defaultImage from '../../images/no-image.jpg';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\nconst API_KEY = 'f5d9437320e908c9e483d2406c4ae5b6';\n\nfunction getImagePosterPath(path) {\n  return path ? `https://image.tmdb.org/t/p/w500/${path}` : defaultImage;\n}\n\nexport async function getTrendingMovies(page, controller) {\n  const response = await axios.get(\n    `trending/movie/day?api_key=${API_KEY}&page=${page}`,\n    { signal: controller.signal }\n  );\n\n  const movies = response.data.results.map(({ id, title, poster_path }) => {\n    return { id, title, posterPath: getImagePosterPath(poster_path) };\n  });\n  return { movies, totalPages: response.data.total_pages };\n}\n\nexport async function getMovieDetails(movieId, controller) {\n  const response = await axios.get(`movie/${movieId}?api_key=${API_KEY}`, {\n    signal: controller.signal,\n  });\n\n  const { title, poster_path, overview, genres, vote_average, release_date } =\n    response.data;\n  return {\n    title,\n    posterPath: getImagePosterPath(poster_path),\n    overview,\n    genres: genres.map(genre => genre.name).join(', '),\n    vote: vote_average.toFixed(1),\n    year: release_date.slice(0, 4),\n  };\n}\nexport async function getMovieCast(movieId, controller) {\n  const response = await axios.get(\n    `movie/${movieId}/credits?api_key=${API_KEY}`,\n    { signal: controller.signal }\n  );\n  const actors = response.data.cast.map(\n    ({ id, name, profile_path, character }) => {\n      return {\n        id,\n        name,\n        profilePath: getImagePosterPath(profile_path),\n        character,\n      };\n    }\n  );\n\n  return actors;\n}\nexport async function getMovieReviews(movieId, controller) {\n  const response = await axios.get(\n    `movie/${movieId}/reviews?api_key=${API_KEY}`,\n    { signal: controller.signal }\n  );\n  const reviews = response.data.results.map(({ id, author, content }) => {\n    return {\n      id,\n      author,\n      content,\n    };\n  });\n\n  return reviews;\n}\nexport async function getMovieSearchQuery(query, page = 1, controller) {\n  const response = await axios.get(\n    `search/movie?api_key=${API_KEY}&query=${query}&page=${page}`,\n    { signal: controller.signal }\n  );\n  const movies = response.data.results.map(({ id, title, poster_path }) => {\n    return {\n      id,\n      title,\n      posterPath: getImagePosterPath(poster_path),\n    };\n  });\n\n  return {\n    movies,\n    totalPages: response.data.total_pages,\n    totalResults: response.data.total_results,\n  };\n}\n"],"names":["Item","styled","Image","Wrapper","InfoText","SpanText","actor","name","profilePath","character","src","alt","List","actors","map","id","movieId","useParams","useState","movieCast","setMovieCast","status","setStatus","error","setError","useEffect","abortController","AbortController","addMovieCast","abort","getMovieCast","cast","message","toast","Loader","length","axios","API_KEY","getImagePosterPath","path","defaultImage","getTrendingMovies","page","controller","signal","response","movies","data","results","title","posterPath","poster_path","totalPages","total_pages","getMovieDetails","overview","genres","vote_average","release_date","genre","join","vote","toFixed","year","slice","profile_path","getMovieReviews","reviews","author","content","getMovieSearchQuery","query","totalResults","total_results"],"sourceRoot":""}