{"version":3,"file":"static/js/823.007e5e5a.chunk.js","mappings":"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","sources":["components/ReviewInfo/ReviewInfo.styled.jsx","components/ReviewInfo/ReviewInfo.jsx","components/Message/Message.styled.jsx","components/Message/Message.jsx","components/Reviews/Reviews.jsx","utils/Api/Api.jsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const ReviewInfoList = styled.ul`\n  display: flex;\n  flex-direction: column;\n  margin-top: 20px;\n  gap: 15px;\n  padding: 0;\n`;\n\nexport const ReviewInfoItem = styled.li`\n  padding: 18px;\n  border-radius: 10px;\n  border: 3px solid rgba(50, 94, 116, 0);\n  transform: scale(1);\n  transition: transform 250ms linear, border 0.25s cubic-bezier(0.4, 0, 0.2, 1);\n  &:hover {\n    transition: all 0.25s;\n    scale: 1.03;\n  }\n`;\n\nexport const ReviewInfoTitle = styled.h2`\n  margin-bottom: 15px;\n  font-width: 600;\n  font-size: 28px;\n`;\nexport const ReviewInfoText = styled.p`\n  margin-bottom: 15px;\n  font-size: 18px;\n  line-height: calc(22 / 18);\n`;\n","import PropTypes from 'prop-types';\nimport {\n  ReviewInfoList,\n  ReviewInfoItem,\n  ReviewInfoTitle,\n  ReviewInfoText,\n} from './ReviewInfo.styled';\n\nconst ReviewInfo = ({ reviews }) => {\n  return (\n    <ReviewInfoList>\n      {reviews.map(({ id, author, content }) => (\n        <ReviewInfoItem key={id}>\n          <ReviewInfoTitle>{author}</ReviewInfoTitle>\n          <ReviewInfoText>{content}</ReviewInfoText>\n        </ReviewInfoItem>\n      ))}\n    </ReviewInfoList>\n  );\n};\n\nReviewInfo.propTypes = {\n  reviews: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      author: PropTypes.string.isRequired,\n      content: PropTypes.string.isRequired,\n    }).isRequired\n  ).isRequired,\n};\n\nexport default ReviewInfo;\n","import styled from '@emotion/styled';\n\nexport const MessageWrapper = styled.div`\n  margin-top: 30px;\n  text-align: center;\n`;\n\nexport const MessageText = styled.p`\n  font-size: 20px;\n`;\n","import { MessageWrapper, MessageText } from './Message.styled';\n\nconst Message = () => {\n  return (\n    <MessageWrapper>\n      <MessageText>There are no reviews for this movie.</MessageText>\n    </MessageWrapper>\n  );\n};\n\nexport default Message;\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport { getMovieReviews } from '../../utils/Api/Api';\n\nimport Loader from '../Loader/Loader';\nimport ReviewInfo from '../ReviewInfo/ReviewInfo';\nimport Message from '../Message/Message';\n\nconst Reviews = () => {\n  const { movieId } = useParams();\n\n  const [movieReviews, setMovieReviews] = useState([]);\n  const [status, setStatus] = useState('idle');\n  const [error, setError] = useState('');\n\n  useEffect(() => {\n    if (!movieId) return;\n    const abortController = new AbortController();\n    async function addMovieReviews() {\n      setStatus('pending');\n      try {\n        const reviews = await getMovieReviews(movieId, abortController);\n        setMovieReviews(reviews);\n        setStatus('resolved');\n      } catch (error) {\n        setError(error.message);\n        setStatus('rejected');\n      }\n    }\n\n    addMovieReviews(movieId, abortController);\n\n    return () => {\n      abortController.abort();\n    };\n  }, [movieId]);\n\n  useEffect(() => {\n    if (error === 'canceled') {\n      return;\n    }\n    if (error) {\n      toast.error(error);\n      setError('');\n    }\n  }, [error]);\n\n  return (\n    <>\n      {status === 'pending' && <Loader />}\n      {status === 'resolved' && movieReviews.length !== 0 ? (\n        <ReviewInfo reviews={movieReviews} />\n      ) : (\n        <Message />\n      )}\n    </>\n  );\n};\n\nexport default Reviews;\n","import axios from 'axios';\n\nimport defaultImage from '../../images/no-image.jpg';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\nconst API_KEY = 'f5d9437320e908c9e483d2406c4ae5b6';\n\nfunction getImagePosterPath(path) {\n  return path ? `https://image.tmdb.org/t/p/w500/${path}` : defaultImage;\n}\n\nexport async function getTrendingMovies(page, controller) {\n  const response = await axios.get(\n    `trending/movie/day?api_key=${API_KEY}&page=${page}`,\n    { signal: controller.signal }\n  );\n\n  const movies = response.data.results.map(({ id, title, poster_path }) => {\n    return { id, title, posterPath: getImagePosterPath(poster_path) };\n  });\n  return { movies, totalPages: response.data.total_pages };\n}\n\nexport async function getMovieDetails(movieId, controller) {\n  const response = await axios.get(`movie/${movieId}?api_key=${API_KEY}`, {\n    signal: controller.signal,\n  });\n\n  const { title, poster_path, overview, genres, vote_average, release_date } =\n    response.data;\n  return {\n    title,\n    posterPath: getImagePosterPath(poster_path),\n    overview,\n    genres: genres.map(genre => genre.name).join(', '),\n    vote: vote_average.toFixed(1),\n    year: release_date.slice(0, 4),\n  };\n}\nexport async function getMovieCast(movieId, controller) {\n  const response = await axios.get(\n    `movie/${movieId}/credits?api_key=${API_KEY}`,\n    { signal: controller.signal }\n  );\n  const actors = response.data.cast.map(\n    ({ id, name, profile_path, character }) => {\n      return {\n        id,\n        name,\n        profilePath: getImagePosterPath(profile_path),\n        character,\n      };\n    }\n  );\n\n  return actors;\n}\nexport async function getMovieReviews(movieId, controller) {\n  const response = await axios.get(\n    `movie/${movieId}/reviews?api_key=${API_KEY}`,\n    { signal: controller.signal }\n  );\n  const reviews = response.data.results.map(({ id, author, content }) => {\n    return {\n      id,\n      author,\n      content,\n    };\n  });\n\n  return reviews;\n}\nexport async function getMovieSearchQuery(query, page = 1, controller) {\n  const response = await axios.get(\n    `search/movie?api_key=${API_KEY}&query=${query}&page=${page}`,\n    { signal: controller.signal }\n  );\n  const movies = response.data.results.map(({ id, title, poster_path }) => {\n    return {\n      id,\n      title,\n      posterPath: getImagePosterPath(poster_path),\n    };\n  });\n\n  return {\n    movies,\n    totalPages: response.data.total_pages,\n    totalResults: response.data.total_results,\n  };\n}\n"],"names":["ReviewInfoList","styled","ReviewInfoItem","ReviewInfoTitle","ReviewInfoText","reviews","map","id","author","content","MessageWrapper","MessageText","movieId","useParams","useState","movieReviews","setMovieReviews","status","setStatus","error","setError","useEffect","abortController","AbortController","addMovieReviews","abort","getMovieReviews","message","toast","Loader","length","axios","API_KEY","getImagePosterPath","path","defaultImage","getTrendingMovies","page","controller","signal","response","movies","data","results","title","posterPath","poster_path","totalPages","total_pages","getMovieDetails","overview","genres","vote_average","release_date","genre","name","join","vote","toFixed","year","slice","getMovieCast","actors","cast","profile_path","character","profilePath","getMovieSearchQuery","query","totalResults","total_results"],"sourceRoot":""}